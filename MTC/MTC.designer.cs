#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MTC
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MTC")]
	public partial class MTCDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertКлиенты(Клиенты instance);
    partial void UpdateКлиенты(Клиенты instance);
    partial void DeleteКлиенты(Клиенты instance);
    partial void InsertЗвонки(Звонки instance);
    partial void UpdateЗвонки(Звонки instance);
    partial void DeleteЗвонки(Звонки instance);
    partial void InsertТарифы(Тарифы instance);
    partial void UpdateТарифы(Тарифы instance);
    partial void DeleteТарифы(Тарифы instance);
    #endregion
		
		public MTCDataContext() : 
				base(global::MTC.Properties.Settings.Default.MTCConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MTCDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MTCDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MTCDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MTCDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Клиенты> Клиенты
		{
			get
			{
				return this.GetTable<Клиенты>();
			}
		}
		
		public System.Data.Linq.Table<Звонки> Звонки
		{
			get
			{
				return this.GetTable<Звонки>();
			}
		}
		
		public System.Data.Linq.Table<Users> Users
		{
			get
			{
				return this.GetTable<Users>();
			}
		}
		
		public System.Data.Linq.Table<Тарифы> Тарифы
		{
			get
			{
				return this.GetTable<Тарифы>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Клиенты")]
	public partial class Клиенты : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_клиента = default(int);
		
		private string _Номер_телефона = default(string);
		
		private string _Фамилия = default(string);
		
		private string _Имя = default(string);
		
		private string _Отчество = default(string);
		
		private System.DateTime _Дата_регистрации = default(System.DateTime);
		
		private EntitySet<Звонки> _Звонки;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    #endregion
		
		public Клиенты()
		{
			this._Звонки = new EntitySet<Звонки>(new Action<Звонки>(this.attach_Звонки), new Action<Звонки>(this.detach_Звонки));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_клиента", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int id_клиента
		{
			get
			{
				return this._id_клиента;
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Номер_телефона", DbType="NChar(20) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Номер_телефона
		{
			get
			{
				return this._Номер_телефона;
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Фамилия", DbType="NChar(20) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Фамилия
		{
			get
			{
				return this._Фамилия;
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Имя", DbType="NChar(20) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Имя
		{
			get
			{
				return this._Имя;
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Отчество", DbType="NChar(20)", UpdateCheck=UpdateCheck.Never)]
		public string Отчество
		{
			get
			{
				return this._Отчество;
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Дата_регистрации", DbType="Date NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime Дата_регистрации
		{
			get
			{
				return this._Дата_регистрации;
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Клиенты_Звонки", Storage="_Звонки", ThisKey="id_клиента", OtherKey="id_клиента")]
		public EntitySet<Звонки> Звонки
		{
			get
			{
				return this._Звонки;
			}
			set
			{
				this._Звонки.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Звонки(Звонки entity)
		{
			this.SendPropertyChanging();
			entity.Клиенты = this;
		}
		
		private void detach_Звонки(Звонки entity)
		{
			this.SendPropertyChanging();
			entity.Клиенты = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Звонки")]
	public partial class Звонки : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_звонка;
		
		private System.DateTime _Дата;
		
		private string _Город;
		
		private int _id_клиента;
		
		private string _Номер_телефона;
		
		private double _Длительность;
		
		private bool _Отправка_счета;
		
		private System.Nullable<bool> _Оплата_счета;
		
		private int _id_тарифа;
		
		private EntityRef<Клиенты> _Клиенты;
		
		private EntityRef<Тарифы> _Тарифы;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_звонкаChanging(int value);
    partial void Onid_звонкаChanged();
    partial void OnДатаChanging(System.DateTime value);
    partial void OnДатаChanged();
    partial void OnГородChanging(string value);
    partial void OnГородChanged();
    partial void Onid_клиентаChanging(int value);
    partial void Onid_клиентаChanged();
    partial void OnНомер_телефонаChanging(string value);
    partial void OnНомер_телефонаChanged();
    partial void OnДлительностьChanging(double value);
    partial void OnДлительностьChanged();
    partial void OnОтправка_счетаChanging(bool value);
    partial void OnОтправка_счетаChanged();
    partial void OnОплата_счетаChanging(System.Nullable<bool> value);
    partial void OnОплата_счетаChanged();
    partial void Onid_тарифаChanging(int value);
    partial void Onid_тарифаChanged();
    #endregion
		
		public Звонки()
		{
			this._Клиенты = default(EntityRef<Клиенты>);
			this._Тарифы = default(EntityRef<Тарифы>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_звонка", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_звонка
		{
			get
			{
				return this._id_звонка;
			}
			set
			{
				if ((this._id_звонка != value))
				{
					this.Onid_звонкаChanging(value);
					this.SendPropertyChanging();
					this._id_звонка = value;
					this.SendPropertyChanged("id_звонка");
					this.Onid_звонкаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Дата", DbType="Date NOT NULL")]
		public System.DateTime Дата
		{
			get
			{
				return this._Дата;
			}
			set
			{
				if ((this._Дата != value))
				{
					this.OnДатаChanging(value);
					this.SendPropertyChanging();
					this._Дата = value;
					this.SendPropertyChanged("Дата");
					this.OnДатаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Город", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string Город
		{
			get
			{
				return this._Город;
			}
			set
			{
				if ((this._Город != value))
				{
					this.OnГородChanging(value);
					this.SendPropertyChanging();
					this._Город = value;
					this.SendPropertyChanged("Город");
					this.OnГородChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_клиента", DbType="Int NOT NULL")]
		public int id_клиента
		{
			get
			{
				return this._id_клиента;
			}
			set
			{
				if ((this._id_клиента != value))
				{
					if (this._Клиенты.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_клиентаChanging(value);
					this.SendPropertyChanging();
					this._id_клиента = value;
					this.SendPropertyChanged("id_клиента");
					this.Onid_клиентаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Номер_телефона", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string Номер_телефона
		{
			get
			{
				return this._Номер_телефона;
			}
			set
			{
				if ((this._Номер_телефона != value))
				{
					this.OnНомер_телефонаChanging(value);
					this.SendPropertyChanging();
					this._Номер_телефона = value;
					this.SendPropertyChanged("Номер_телефона");
					this.OnНомер_телефонаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Длительность", DbType="Float NOT NULL")]
		public double Длительность
		{
			get
			{
				return this._Длительность;
			}
			set
			{
				if ((this._Длительность != value))
				{
					this.OnДлительностьChanging(value);
					this.SendPropertyChanging();
					this._Длительность = value;
					this.SendPropertyChanged("Длительность");
					this.OnДлительностьChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Отправка_счета", DbType="Bit NOT NULL")]
		public bool Отправка_счета
		{
			get
			{
				return this._Отправка_счета;
			}
			set
			{
				if ((this._Отправка_счета != value))
				{
					this.OnОтправка_счетаChanging(value);
					this.SendPropertyChanging();
					this._Отправка_счета = value;
					this.SendPropertyChanged("Отправка_счета");
					this.OnОтправка_счетаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Оплата_счета", DbType="Bit")]
		public System.Nullable<bool> Оплата_счета
		{
			get
			{
				return this._Оплата_счета;
			}
			set
			{
				if ((this._Оплата_счета != value))
				{
					this.OnОплата_счетаChanging(value);
					this.SendPropertyChanging();
					this._Оплата_счета = value;
					this.SendPropertyChanged("Оплата_счета");
					this.OnОплата_счетаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_тарифа", DbType="Int NOT NULL")]
		public int id_тарифа
		{
			get
			{
				return this._id_тарифа;
			}
			set
			{
				if ((this._id_тарифа != value))
				{
					if (this._Тарифы.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_тарифаChanging(value);
					this.SendPropertyChanging();
					this._id_тарифа = value;
					this.SendPropertyChanged("id_тарифа");
					this.Onid_тарифаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Клиенты_Звонки", Storage="_Клиенты", ThisKey="id_клиента", OtherKey="id_клиента", IsForeignKey=true)]
		public Клиенты Клиенты
		{
			get
			{
				return this._Клиенты.Entity;
			}
			set
			{
				Клиенты previousValue = this._Клиенты.Entity;
				if (((previousValue != value) 
							|| (this._Клиенты.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Клиенты.Entity = null;
						previousValue.Звонки.Remove(this);
					}
					this._Клиенты.Entity = value;
					if ((value != null))
					{
						value.Звонки.Add(this);
						this._id_клиента = value.id_клиента;
					}
					else
					{
						this._id_клиента = default(int);
					}
					this.SendPropertyChanged("Клиенты");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Тарифы_Звонки", Storage="_Тарифы", ThisKey="id_тарифа", OtherKey="id_тарифа", IsForeignKey=true)]
		public Тарифы Тарифы
		{
			get
			{
				return this._Тарифы.Entity;
			}
			set
			{
				Тарифы previousValue = this._Тарифы.Entity;
				if (((previousValue != value) 
							|| (this._Тарифы.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Тарифы.Entity = null;
						previousValue.Звонки.Remove(this);
					}
					this._Тарифы.Entity = value;
					if ((value != null))
					{
						value.Звонки.Add(this);
						this._id_тарифа = value.id_тарифа;
					}
					else
					{
						this._id_тарифа = default(int);
					}
					this.SendPropertyChanged("Тарифы");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class Users
	{
		
		private int _id_user;
		
		private string _login;
		
		private string _password;
		
		private string _Роль;
		
		private string _Фамилия;
		
		private string _Имя;
		
		private string _Отчество;
		
		private System.DateTime _Дата_регистрации;
		
		public Users()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_user", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int id_user
		{
			get
			{
				return this._id_user;
			}
			set
			{
				if ((this._id_user != value))
				{
					this._id_user = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_login", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string login
		{
			get
			{
				return this._login;
			}
			set
			{
				if ((this._login != value))
				{
					this._login = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this._password = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Роль", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string Роль
		{
			get
			{
				return this._Роль;
			}
			set
			{
				if ((this._Роль != value))
				{
					this._Роль = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Фамилия", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string Фамилия
		{
			get
			{
				return this._Фамилия;
			}
			set
			{
				if ((this._Фамилия != value))
				{
					this._Фамилия = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Имя", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string Имя
		{
			get
			{
				return this._Имя;
			}
			set
			{
				if ((this._Имя != value))
				{
					this._Имя = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Отчество", DbType="NChar(20)")]
		public string Отчество
		{
			get
			{
				return this._Отчество;
			}
			set
			{
				if ((this._Отчество != value))
				{
					this._Отчество = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Дата_регистрации", DbType="Date NOT NULL")]
		public System.DateTime Дата_регистрации
		{
			get
			{
				return this._Дата_регистрации;
			}
			set
			{
				if ((this._Дата_регистрации != value))
				{
					this._Дата_регистрации = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Тарифы")]
	public partial class Тарифы : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_тарифа;
		
		private string _Область;
		
		private string _Район;
		
		private string _Населенный_пункт;
		
		private double _Цена;
		
		private double _Льготная_цена;
		
		private EntitySet<Звонки> _Звонки;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_тарифаChanging(int value);
    partial void Onid_тарифаChanged();
    partial void OnОбластьChanging(string value);
    partial void OnОбластьChanged();
    partial void OnРайонChanging(string value);
    partial void OnРайонChanged();
    partial void OnНаселенный_пунктChanging(string value);
    partial void OnНаселенный_пунктChanged();
    partial void OnЦенаChanging(double value);
    partial void OnЦенаChanged();
    partial void OnЛьготная_ценаChanging(double value);
    partial void OnЛьготная_ценаChanged();
    #endregion
		
		public Тарифы()
		{
			this._Звонки = new EntitySet<Звонки>(new Action<Звонки>(this.attach_Звонки), new Action<Звонки>(this.detach_Звонки));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_тарифа", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_тарифа
		{
			get
			{
				return this._id_тарифа;
			}
			set
			{
				if ((this._id_тарифа != value))
				{
					this.Onid_тарифаChanging(value);
					this.SendPropertyChanging();
					this._id_тарифа = value;
					this.SendPropertyChanged("id_тарифа");
					this.Onid_тарифаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Область", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string Область
		{
			get
			{
				return this._Область;
			}
			set
			{
				if ((this._Область != value))
				{
					this.OnОбластьChanging(value);
					this.SendPropertyChanging();
					this._Область = value;
					this.SendPropertyChanged("Область");
					this.OnОбластьChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Район", DbType="NChar(20)")]
		public string Район
		{
			get
			{
				return this._Район;
			}
			set
			{
				if ((this._Район != value))
				{
					this.OnРайонChanging(value);
					this.SendPropertyChanging();
					this._Район = value;
					this.SendPropertyChanged("Район");
					this.OnРайонChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Населенный_пункт", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string Населенный_пункт
		{
			get
			{
				return this._Населенный_пункт;
			}
			set
			{
				if ((this._Населенный_пункт != value))
				{
					this.OnНаселенный_пунктChanging(value);
					this.SendPropertyChanging();
					this._Населенный_пункт = value;
					this.SendPropertyChanged("Населенный_пункт");
					this.OnНаселенный_пунктChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Цена", DbType="Float NOT NULL")]
		public double Цена
		{
			get
			{
				return this._Цена;
			}
			set
			{
				if ((this._Цена != value))
				{
					this.OnЦенаChanging(value);
					this.SendPropertyChanging();
					this._Цена = value;
					this.SendPropertyChanged("Цена");
					this.OnЦенаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Льготная_цена", DbType="Float NOT NULL")]
		public double Льготная_цена
		{
			get
			{
				return this._Льготная_цена;
			}
			set
			{
				if ((this._Льготная_цена != value))
				{
					this.OnЛьготная_ценаChanging(value);
					this.SendPropertyChanging();
					this._Льготная_цена = value;
					this.SendPropertyChanged("Льготная_цена");
					this.OnЛьготная_ценаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Тарифы_Звонки", Storage="_Звонки", ThisKey="id_тарифа", OtherKey="id_тарифа")]
		public EntitySet<Звонки> Звонки
		{
			get
			{
				return this._Звонки;
			}
			set
			{
				this._Звонки.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Звонки(Звонки entity)
		{
			this.SendPropertyChanging();
			entity.Тарифы = this;
		}
		
		private void detach_Звонки(Звонки entity)
		{
			this.SendPropertyChanging();
			entity.Тарифы = null;
		}
	}
}
#pragma warning restore 1591
